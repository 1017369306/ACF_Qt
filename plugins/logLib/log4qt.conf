#设置储存log文件的根目录
logpath=./logs

log4j.reset=true
#log4j.Debug=WARN
#log4j.threshold=NULL
#设置是否监听QDebug输出的字符串
#log4j.handleQtMessages=true
#在运行中，是否监视此文件配置的变化
log4j.watchThisFile=false

#设置根Logger的输出log等级为All
#设置Log输出的几种输出源（appender）：console, daily
#log4j.rootLogger=ALL, console, daily
log4j.rootLogger=TRACE, traceFile

#############
# 输出到控制台
#############
###############################################################################################
# 配置INFO CONSOLE输出到控制台
# log4j.rootLogger日志输出类别和级别：只输出不低于该级别的日志信息DEBUG < INFO < WARN < ERROR < FATAL
log4j.appender.console=org.apache.log4j.ConsoleAppender
#log4j.appender.console.target=STDOUT_TARGET
#log4j.appender.console.layout=org.apache.log4j.TTCCLayout
log4j.appender.console.layout.dateFormat=yyyy.MM.dd hh:mm:ss.zzz
log4j.appender.console.layout.contextPrinting=true
log4j.appender.console.threshold=ALL

# 配置CONSOLE设置为自定义布局模式
log4j.appender.console.layout=org.apache.log4j.PatternLayout
# 配置CONSOLE日志的输出格式: %r耗费毫秒数 %p日志的优先级 %t线程名 %C所属类名通常为全类名 %L代码中的行号 %x线程相关联的NDC %m日志 %n换行
log4j.appender.console.layout.ConversionPattern={"dateTime":"%d{yyyy-MM-dd HH:mm:ss.zzz}","logType":"%5p","thread":"%t","param":"%m","codePosition":"%l"}%n
###############################################################################################
 
################
# 输出到日志文件中
################

###############################################################################################
log4j.logger.traceAppender=TRACE,traceFile
# 配置logfile输出到文件中 文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.traceFile=org.apache.log4j.RollingFileAppender
# 输出文件位置此为项目根目录下的logs文件夹中
log4j.appender.traceFile.File=${logpath}/TRACE/trace.log
#true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是false
log4j.appender.traceFile.appendFile=true
# 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.traceFile.MaxFileSize=50MB
# 指定可以产生的滚动文件的最大数
log4j.appender.traceFile.MaxBackupIndex=2
# 配置logfile为自定义布局模式
log4j.appender.traceFile.layout=org.apache.log4j.PatternLayout
log4j.appender.traceFile.layout.ConversionPattern={"dateTime":"%d{yyyy-MM-dd HH:mm:ss.zzz}","logType":"%5p","thread":"%t","param":"%m","codePosition":"%l"}%n
###############################################################################################

###############################################################################################
log4j.logger.debugAppender=DEBUG,debugFile
# 配置logfile输出到文件中 文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.debugFile=org.apache.log4j.RollingFileAppender
# 输出文件位置此为项目根目录下的logs文件夹中
log4j.appender.debugFile.File=${logpath}/DEBUG/debug.log
#true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是false
log4j.appender.debugFile.appendFile=true
# 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.traceFile.MaxFileSize=50MB
# 指定可以产生的滚动文件的最大数
log4j.appender.traceFile.MaxBackupIndex=2
# 配置logfile为自定义布局模式
log4j.appender.debugFile.layout=org.apache.log4j.PatternLayout
log4j.appender.debugFile.layout.ConversionPattern={"dateTime":"%d{yyyy-MM-dd HH:mm:ss.zzz}","logType":"%5p","thread":"%t","param":"%m","codePosition":"%l"}%n
###############################################################################################
 
###############################################################################################
log4j.logger.infoAppender=INFO,infoFile
# 配置logfile输出到文件中 文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.infoFile=org.apache.log4j.RollingFileAppender
# 输出文件位置此为项目根目录下的logs文件夹中
log4j.appender.infoFile.File=${logpath}/INFO/info.log
#true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是false
log4j.appender.infoFile.appendFile=true
# 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.traceFile.MaxFileSize=50MB
# 指定可以产生的滚动文件的最大数
log4j.appender.traceFile.MaxBackupIndex=2
# 配置logfile为自定义布局模式
log4j.appender.infoFile.layout=org.apache.log4j.PatternLayout
log4j.appender.infoFile.layout.ConversionPattern={"dateTime":"%d{yyyy-MM-dd HH:mm:ss.zzz}","logType":"%5p","thread":"%t","param":"%m","codePosition":"%l"}%n
###############################################################################################

###############################################################################################
log4j.logger.warnAppender=WARN,warnFile
# 配置logfile输出到文件中 文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.warnFile=org.apache.log4j.RollingFileAppender
# 输出文件位置此为项目根目录下的logs文件夹中
log4j.appender.warnFile.File=${logpath}/WARN/warn.log
#true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是false
log4j.appender.warnFile.appendFile=true
# 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.traceFile.MaxFileSize=50MB
# 指定可以产生的滚动文件的最大数
log4j.appender.traceFile.MaxBackupIndex=2
# 配置logfile为自定义布局模式
log4j.appender.warnFile.layout=org.apache.log4j.PatternLayout
log4j.appender.warnFile.layout.ConversionPattern={"dateTime":"%d{yyyy-MM-dd HH:mm:ss.zzz}","logType":"%5p","thread":"%t","param":"%m","codePosition":"%l"}%n
###############################################################################################
 
###############################################################################################
log4j.logger.errorAppender=ERROR,errorFile
# 配置logfile输出到文件中 文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.errorFile=org.apache.log4j.RollingFileAppender
# 输出文件位置此为项目根目录下的logs文件夹中
log4j.appender.errorFile.File=${logpath}/ERROR/error.log
#true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是false
log4j.appender.errorFile.appendFile=true
# 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.traceFile.MaxFileSize=50MB
# 指定可以产生的滚动文件的最大数
log4j.appender.traceFile.MaxBackupIndex=2
# 配置logfile为自定义布局模式
log4j.appender.errorFile.layout=org.apache.log4j.PatternLayout
log4j.appender.errorFile.layout.ConversionPattern={"dateTime":"%d{yyyy-MM-dd HH:mm:ss.zzz}","logType":"%5p","thread":"%t","param":"%m","codePosition":"%l"}%n
###############################################################################################

###############################################################################################
log4j.logger.fatalAppender=FATAL,fatalFile
# 配置logfile输出到文件中 文件大小到达指定尺寸的时候产生一个新的文件
log4j.appender.fatalFile=org.apache.log4j.RollingFileAppender
# 输出文件位置此为项目根目录下的logs文件夹中
log4j.appender.fatalFile.File=${logpath}/FATAL/fatal.log
#true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是false
log4j.appender.fatalFile.appendFile=true
# 后缀可以是KB, MB 或者是 GB. 在日志文件到达该大小时，将会自动滚动，即将原来的内容移到mylog.log.1文件。
log4j.appender.traceFile.MaxFileSize=50MB
# 指定可以产生的滚动文件的最大数
log4j.appender.traceFile.MaxBackupIndex=2
# 配置logfile为自定义布局模式
log4j.appender.fatalFile.layout=org.apache.log4j.PatternLayout
log4j.appender.fatalFile.layout.ConversionPattern={"dateTime":"%d{yyyy-MM-dd HH:mm:ss.zzz}","logType":"%5p","thread":"%t","param":"%m","codePosition":"%l"}%n
###############################################################################################
